{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { storage } from './config';\n\nconst useStorage = file => {\n  _s();\n\n  const [error, setError] = useState(null);\n  const [url, setUrl] = useState(null);\n  useEffect(() => {\n    const storageRef = storage.ref(Math.random() * 10 + file.name);\n    storageRef.put(file).on('state_changed', snap => {}, err => {\n      setError(err);\n    }, async () => {\n      const url = await storageRef.getDownloadURL();\n      setUrl(url);\n    });\n  }, [File]);\n  return {\n    url,\n    error\n  };\n};\n\n_s(useStorage, \"6+LwYzV3QtgoFJ6sOYnIt1Ubniw=\");\n\nexport default useStorage;","map":{"version":3,"sources":["C:/Users/pluto/Documents/GitHub/Bookshop Site/src/firebase/useStorage.js"],"names":["useState","useEffect","storage","useStorage","file","error","setError","url","setUrl","storageRef","ref","Math","random","name","put","on","snap","err","getDownloadURL","File"],"mappings":";;AAAA,SAAQA,QAAR,EAAiBC,SAAjB,QAAiC,OAAjC;AACA,SAAQC,OAAR,QAAsB,UAAtB;;AAEA,MAAMC,UAAU,GAAIC,IAAD,IAAU;AAAA;;AACvB,QAAM,CAACC,KAAD,EAAOC,QAAP,IAAmBN,QAAQ,CAAC,IAAD,CAAjC;AACA,QAAM,CAACO,GAAD,EAAKC,MAAL,IAAeR,QAAQ,CAAC,IAAD,CAA7B;AAEAC,EAAAA,SAAS,CAAC,MAAI;AACR,UAAMQ,UAAU,GAAGP,OAAO,CAACQ,GAAR,CAAaC,IAAI,CAACC,MAAL,KAAc,EAAf,GAAmBR,IAAI,CAACS,IAApC,CAAnB;AACAJ,IAAAA,UAAU,CAACK,GAAX,CAAeV,IAAf,EAAqBW,EAArB,CAAwB,eAAxB,EAA0CC,IAAD,IAAQ,CAAE,CAAnD,EAAqDC,GAAD,IAAO;AACrDX,MAAAA,QAAQ,CAACW,GAAD,CAAR;AACL,KAFD,EAEE,YAAY;AACR,YAAMV,GAAG,GAAI,MAAME,UAAU,CAACS,cAAX,EAAnB;AACAV,MAAAA,MAAM,CAACD,GAAD,CAAN;AACL,KALD;AAML,GARQ,EAQP,CAACY,IAAD,CARO,CAAT;AAUA,SAAO;AAACZ,IAAAA,GAAD;AAAKF,IAAAA;AAAL,GAAP;AACL,CAfD;;GAAMF,U;;AAiBN,eAAeA,UAAf","sourcesContent":["import {useState,useEffect} from 'react'\r\nimport {storage} from './config'\r\n\r\nconst useStorage = (file) => {\r\n      const [error,setError] = useState(null);\r\n      const [url,setUrl] = useState(null);\r\n\r\n      useEffect(()=>{\r\n            const storageRef = storage.ref((Math.random()*10)+file.name);\r\n            storageRef.put(file).on('state_changed', (snap)=>{},(err)=>{\r\n                  setError(err);\r\n            },async () => {\r\n                  const url =  await storageRef.getDownloadURL();\r\n                  setUrl(url);\r\n            })\r\n      },[File]);\r\n\r\n      return {url,error}\r\n}\r\n\r\nexport default useStorage;"]},"metadata":{},"sourceType":"module"}